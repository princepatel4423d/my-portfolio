import Blog from '../models/blogModel.js';
import slugify from 'slugify';

// Create a new blog
export const createBlog = async (req, res) => {
  try {
    const { title, description, content, readTime, category, tags } = req.body;
    const image = req.file ? req.file.path : null;

    const blog = new Blog({
      title,
      description,
      content,
      image,
      readTime,
      category,
      tags: tags ? (Array.isArray(tags) ? tags.slice(0, 5) : [tags]) : []
      // slug is auto-generated by pre-validate hook
    });

    const savedBlog = await blog.save();
    res.status(201).json(savedBlog);
  } catch (err) {
    res.status(400).json({ error: err.message });
  }
};

// Update an existing blog by slug
export const updateBlog = async (req, res) => {
  try {
    const updates = req.body;

    if (req.file) updates.image = req.file.path; // update image if provided

    // Ensure tags is an array and max 5 tags
    if (updates.tags) {
      if (typeof updates.tags === 'string') {
        updates.tags = [updates.tags];
      }
      if (Array.isArray(updates.tags) && updates.tags.length > 5) {
        updates.tags = updates.tags.slice(0, 5);
      }
    }

    // Regenerate slug if title is updated
    if (updates.title) {
      updates.slug = slugify(updates.title, { lower: true, strict: true, trim: true });
    }

    // Find and update by slug
    const updatedBlog = await Blog.findOneAndUpdate(
      { slug: req.params.slug },
      updates,
      { new: true }
    );

    if (!updatedBlog) return res.status(404).json({ error: "Blog not found" });

    res.json(updatedBlog);
  } catch (err) {
    res.status(400).json({ error: err.message });
  }
};

// Delete a blog by slug
export const deleteBlog = async (req, res) => {
  try {
    const deletedBlog = await Blog.findOneAndDelete({ slug: req.params.slug });

    if (!deletedBlog) return res.status(404).json({ error: "Blog not found" });

    res.json({ message: "Blog deleted successfully" });
  } catch (err) {
    res.status(400).json({ error: err.message });
  }
};

// Get all blogs (sorted by date desc)
export const getAllBlogs = async (req, res) => {
  try {
    const blogs = await Blog.find().sort({ date: -1 });
    res.json(blogs);
  } catch (err) {
    res.status(500).json({ error: err.message });
  }
};

// Get a single blog by slug
export const getBlogBySlug = async (req, res) => {
  try {
    // Find blog by slug field instead of id
    const blog = await Blog.findOne({ slug: req.params.slug });
    if (!blog) {
      return res.status(404).json({ error: 'Blog not found' });
    }
    res.json(blog);
  } catch (err) {
    res.status(400).json({ error: 'Invalid slug' });
  }
};

// Get the latest blog by date (most recent)
export const getLatestBlog = async (req, res) => {
  try {
    const blog = await Blog.findOne().sort({ date: -1 }); // Assumes 'date' is your publish field
    if (!blog) {
      return res.status(404).json({ error: 'No blog posts found' });
    }
    res.json(blog);
  } catch (err) {
    res.status(500).json({ error: 'Failed to fetch latest blog post' });
  }
};

// Get all unique categories
export const getAllCategories = async (req, res) => {
  try {
    const categories = await Blog.distinct('category');
    res.status(200).json(categories);
  } catch (error) {
    res.status(500).json({ message: 'Failed to get categories', error });
  }
};

// Get all unique tags
export const getAllTags = async (req, res) => {
  try {
    const tags = await Blog.distinct('tags');
    res.status(200).json(tags);
  } catch (error) {
    res.status(500).json({ message: 'Failed to get tags', error });
  }
};